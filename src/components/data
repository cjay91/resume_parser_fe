const columns = [
        {
            name: "Name",
            selector: row => row.name
        },
        {
            name: "Email",
            selector: row => row.email
        }
    ];

    const data = [
        {
            id: 1,
            name: 'Chathura',
            email: 'chathura@gmail.com'
        },
        {
            id: 2,
            name: 'Chathura',
            email: 'chathura@gmail.com'
        }
    ];



    ============================
    import React, { useEffect, useState } from "react";

    const YourReactComponent = () => {
        const [cvScoreData, setCvScoreData] = useState([]);
    
        useEffect(() => {
            const fetchData = async () => {
                try {
                    const response = await fetch('http://your-flask-backend-url/get_data');
                    const data = await response.json();
                    setCvScoreData(data);
                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            };
    
            fetchData();
        }, []); // Empty dependency array ensures the effect runs once on mount
    
        return (
            <div>
                <h2>Your Component</h2>
                <ul>
                    {cvScoreData.map((item) => (
                        <li key={item.id}>
                            <strong>Name:</strong> {item.name}, <strong>Email:</strong> {item.email}
                        </li>
                    ))}
                </ul>
            </div>
        );
    };
    
    export default YourReactComponent;

    

    ==================

    import React, { useEffect, useState } from "react";
import DataTable from 'react-data-table-component';
import axios from 'axios';

const App = () => {
    const [columns, setColumns] = useState([]);
    const [data, setData] = useState([]);

    useEffect(() => {
        // Make an API request to get columns and data
        axios.get('http://127.0.0.1:5000/get_data')
            .then(response => {
                // Assuming the response has a 'columns' and 'data' property
                setColumns(response.data.columns);
                setData(response.data.data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }, []); // Empty dependency array ensures the effect runs once on mount

    return (
        <div className="container mt-5">
            <DataTable
                columns={columns}
                data={data}
            />
        </div>
    );
}

export default App;
